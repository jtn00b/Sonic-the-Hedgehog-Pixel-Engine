<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--- Setup variables ---

//--- Variables ---//
xpos= x;
ypos= y;
prevx = xpos; //Previous x will be set to the x value only for the first step.
prevy = xpos; //Previous y will be set to the y value only for the first step.
draw_x = x;
draw_y = y;
xsp= 0;
ysp= 0;
gsp= 0;
slope= 0;
angle= 0;
draw_angle= angle; //draw_angle will be the angle shown when drawing the character
tile_x = 0;
tile_y = 0;
action= 0;
ground= 0;
mode = 0;
dir= 1; //Direction
spin= 0; //Will be used to determine if the character spins or not
control_lock = 0; //Will be used to determinate if the input will be locked or not.
p_layer = 0;
global.player_rings[id] = 0;
sd_subimg = 0;
debug = debug_mode;
hurt = 0;
hurttimer = 0;
landed = false;
visual_angle = 0;

//--- Sensor Constants ---//
center_x = xpos;
if !spin center_y = ypos+16-19; else center_y = ypos+16-15;
sensor_hspace = 9;
sensor_a_y = 0;
sensor_b_y = 0;
sensor_c_y = 0;
sensor_d_y = 0;
sensor_e_y = 0;
sensor_f_y = 0;
sensor_a_x = 0;
sensor_b_x = 0;
sensor_c_x = 0;
sensor_d_x = 0;
sensor_e_x = 0;
sensor_f_x = 0;
x1 = 0;
x2 = 0;
y1 = 0;
y2 = 0;
xa = 0;
xb = 0;
ya = 0;
yb = 0;

//--- Grounded speed constants ---//
acc= 0.046875;
dec= 0.5;
frc= 0.046875;
top= 6;
slp= 0.125;
slprollup= 0.078125;
slprolldown= 0.3125;
rollfrc= 0.0234375;
rolldcc= 0.125;
fall= 2.5;
spindrev = 0;

//--- Jumping Constants ---//
air= 0.09375;
jmp= 6.5;
knxjmp= 6;
grv= 0.21875;

//--- Misc. Constants ---//
platform_check  = 0;
plat_col = 0;
allow_input = true;
skidding = 0;
skidding_sound = 0;
skidding_effect_timer = 0;
skidding_effect_flag = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///--- Sprite Constants ---
character = undefined; //Character indexing is used as strings.

//We'll use a switch statement to set the sprites according to the current character index.
//To add your own, add a new case, change the chracter value to your character name as a STRING, then change the sprite values to your own.
switch (character){
    default:
    case "sonic":
        character = "sonic"; //in case the variable turns out to be unknown, it will default back to sonic.
        stand_sprite = spr_sonic_stand;
        idle_sprite = spr_sonic_stand;
        walk_sprite = spr_sonic_walk;
        run_sprite = spr_sonic_run;
        run2_sprite = spr_sonic_run_2;
        spin_sprite = spr_sonic_spin;
        spindash_sprite = spr_sonic_spindash;
        crouch_sprite = spr_sonic_crouch;
        lookup_sprite = spr_sonic_lookup;
        pushing_sprite = spr_sonic_pushing;
        rotate_sprite = spr_sonic_rotate;
        skidding_sprite = spr_sonic_skidding;
        hurt_sprite = spr_sonic_hurt;
        die_sprite = spr_sonic_die;
        break;
}

//--- Animation Variables ---//
ani_index = undefined; //Sprite Index
ani_to_be_set = stand_sprite; //Animation to be set
ani_subimg_duration_timer = 0; //Frame duration timer
ani_subimg_num = 0; //Number of subimages the current sprite has
ani_subimg_duration_set = 0; //Frame Duration
ani_subimg = 0; //Sprite subimage index (starting from 0)
ani_subimg_loop = 0; //Loop subimage index.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset platform!
if scr_collision_platform_check_bottom(obj_walls_platform) == noone || !ground
{
    platform_check = 0;
}  
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up Draw variables
draw_x = floor(xpos);
draw_y = floor(ypos);

switch mode{
    case 1:
        if spin draw_x = floor(xpos)+1;
        break;
    case 2:
        if !spin draw_y = floor(ypos)+1; else draw_y = floor(ypos)-1;
        break;
    case 3:
        if !spin draw_x = floor(xpos)+1;
        break;
    default:
        draw_x = floor(xpos);
        draw_y = floor(ypos);
        break;
}

x = draw_x;
y = draw_y;


scr_p_rotation_legacy()
draw_angle = clamp(draw_angle, 0, 360)

if action == 4 &amp;&amp; ground sd_subimg += 0.5;
else sd_subimg = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Die Event

if action = 9{
    if hurttimer &lt;= 0
        room_restart();
    if hurttimer &lt;= 20
        audio_stop_all();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Limit Speed
gsp = clamp(gsp, -24, 24);
xsp = clamp(xsp, -24, 24);
ysp = clamp(ysp, -24, 24);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Scripts
if scr_collision_box_main(obj_layer_1_switch){
    p_layer = 1;
}
if scr_collision_box_main(obj_layer_2_switch){
    p_layer = 2;
}

scr_p_physics(); //This will execute the script handling the main player physics, such as slopes, movement, etc.
scr_p_input(); //The script executed will handle the player input, such as jumping, moving, etc.
scr_p_sprite_handle(); //Handle the sprites of the character
scr_p_collision_sensors_update(); //Manage the coordinates of the sensors
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Object handling
if action != 9{
    //Rings
    if scr_collision_box_main(par_rings){
        scr_p_handle_rings();
    }
    
    //Springs
    if scr_collision_arg_any(par_springs){
        scr_p_handle_springs();
    }
    
    //Monitors
    if scr_collision_box_main(par_monitors){
        scr_p_handle_monitors();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Handling

ani_subimg_num = (sprite_get_number(ani_to_be_set)) - 1;

//anim_index handling
if ((ani_index != ani_to_be_set)) //on the event of an animation needing to change
{
    ani_index = ani_to_be_set; //set animation
    ani_subimg_duration_timer = ani_subimg_duration_set; //reset subimage duration counter, "ani_subimg_duration_set" would be whatever the duration should be at that moment
    ani_subimg = 0; //0 being the first subimage
}
else
{
//subimage handling
    if (ani_subimg_duration_timer &gt; 0)
    {
        ani_subimg_duration_timer -= 1; //count down subimage duration
    }
    if ani_subimg_duration_timer &lt;= 0
    {
        //move to next subimage
        ani_subimg = ani_subimg+1; //next subimage
        if (ani_subimg &gt; ani_subimg_num) ani_subimg = ani_subimg_loop; //animation has ended, loop animation
    
        ani_subimg_duration_timer = ani_subimg_duration_set; //reset duration counter, "ani_subimg_duration_set" would be whatever the duration should be at that moment
    }
}

if ani_index == spin_sprite spin = true; else spin = false; //Check if the character if spinning or not
scr_p_collision_sensors_update();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(window_get_width(), window_get_height());
draw_set_font(-1);
draw_set_halign(fa_left);
if debug{
    draw_text(0, 0, "xpos "+string(xpos));
    draw_text(0, 16, "ypos "+string(ypos));
    draw_text(0, 16*2, "xsp "+string(xsp));
    draw_text(0, 16*3, "ysp "+string(ysp));
    draw_text(0, 16*4, "gsp "+string(gsp));
    draw_text(0, 16*5, "ground "+string(ground));
    draw_text(0, 16*6, "angle "+string(angle));
    draw_text(0, 16*7, "mode "+string(mode));
    draw_text(0, 16*8, "tile_x "+string(tile_x));
    draw_text(0, 16*9, "tile_y "+string(tile_y));
    draw_text(0, 16*15, "fps "+string(fps));
    draw_text(0, 16*16, "real fps "+string(fps_real));
    draw_text(0, 16*10, "visual_angle "+string(45*(round(draw_angle/45) % 8)));
    draw_text(0, 16*11, "sprite index "+string(ani_index));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw everything
draw_set_color(c_white);
draw_sprite_ext(ani_index, ani_subimg, draw_x, draw_y, dir, 1, 45*(round(draw_angle/45) % 8) /*draw_angle*/, c_white, 1);
if action == 4 &amp;&amp; ground draw_sprite_ext(spr_spindash_dust, sd_subimg, xpos, ypos, dir, 1, 0, c_white, 1);

//Draw Sensors
if debug{
    draw_line(floor(center_x)-(dcos(angle)*sensor_hspace)+(dsin(angle)*16), floor(ypos)+((dsin(angle)*sensor_hspace)+(dcos(angle)*16)), floor(center_x)-(dcos(angle)*sensor_hspace)+(dsin(angle)*32), floor(ypos)+(dsin(angle)*sensor_hspace)+(dcos(angle)*32));
    draw_line(floor(center_x)+(dcos(angle)*sensor_hspace)+(dsin(angle)*16), floor(ypos)-((dsin(angle)*sensor_hspace)-(dcos(angle)*16)), floor(center_x)+(dcos(angle)*sensor_hspace)+(dsin(angle)*32), floor(ypos)-(dsin(angle)*sensor_hspace)+(dcos(angle)*32));
    switch mode{
        case 0:
        case 2:
            draw_line_color(sensor_a_x, center_y, sensor_a_x, sensor_a_y, c_lime, c_lime);
            draw_line_color(sensor_b_x, center_y, sensor_b_x, sensor_b_y, c_aqua, c_aqua);
            draw_line_color(sensor_c_x, center_y, sensor_c_x, sensor_c_y, c_blue, c_blue);
            draw_line_color(sensor_d_x, center_y, sensor_d_x, sensor_d_y, c_yellow, c_yellow);
            draw_line_color(center_x, sensor_e_y, sensor_e_x, sensor_e_y, c_fuchsia, c_fuchsia);
            draw_line_color(center_x, sensor_f_y, sensor_f_x, sensor_f_y, c_red, c_red);
            break;
        case 1:
        case 3:
            draw_line_color(center_x, sensor_a_y, sensor_a_x, sensor_a_y, c_lime, c_lime);
            draw_line_color(center_x, sensor_b_y, sensor_b_x, sensor_b_y, c_aqua, c_aqua);
            draw_line_color(center_x, sensor_c_y, sensor_c_x, sensor_c_y, c_blue, c_blue);
            draw_line_color(center_x, sensor_d_y, sensor_d_x, sensor_d_y, c_yellow, c_yellow);
            draw_line_color(sensor_e_x, center_y, sensor_e_x, sensor_e_y, c_fuchsia, c_fuchsia);
            draw_line_color(sensor_f_x, center_y, sensor_f_x, sensor_f_y, c_red, c_red);
            break;
    }
    draw_set_alpha(0.5);
    /*switch mode{
        case 0:
            draw_rectangle_color(center_x-8, sensor_c_y+3, center_x+8, sensor_b_y-3, c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false)
            break;
        case 1:
            draw_rectangle_color(sensor_c_x+3, center_y+8, sensor_b_x-3, center_y-8, c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false)
            break;
        case 2:
            draw_rectangle_color(center_x-8, sensor_b_y+3, center_x+8, sensor_d_y-3, c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false)
            break;
        case 3:
            draw_rectangle_color(sensor_a_x+3, center_y+8, sensor_d_x-3, center_y-8, c_fuchsia, c_fuchsia, c_fuchsia, c_fuchsia, false)
            break;
    }*/
    draw_rectangle_color(tile_x, tile_y, tile_x+15, tile_y+15, c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
    draw_point_color(x1, y1, c_red);
    draw_point_color(x2, y2, c_red);
}

//Debugs?
if keyboard_check(ord('F'))
{
    scr_p_get_hurt();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_speed == 60 room_speed = 1; else room_speed = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !debug debug = true; else debug = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
